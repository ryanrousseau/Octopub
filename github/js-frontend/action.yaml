name: Docker Build and Push
description: Build the JavaScript frontend
inputs:
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  aws_access_key:
    description: 'The aws access key'
    required: true
  aws_secret_access_key:
    description: 'The aws secret access key'
    required: true
  octopus_url:
    description: 'The octopus server'
    required: true
  octopus_apikey:
    description: 'The octopus apikey'
    required: true
  dockerhub_username:
    description: 'The dockerhub username'
    required: true
  dockerhub_password:
    description: 'The dockerhub password'
    required: true

runs:
  using: "composite"
  steps:
    # These are the dependencies that need to be manually installed to support https://github.com/ehsaniara/maven-repository-aws-s3
    - name: Install maven-repository-aws-s3 dependencies
      run: |
        HOME=$(dirname $(readlink -f $(which mvn)))
        for dep in "com.github.ehsaniara:maven-repository-aws-s3:1.2.11:jar" "org.apache.httpcomponents:httpcore:4.4.16:jar" "com.amazonaws:aws-java-sdk-s3:1.12.405:jar" "com.amazonaws:aws-java-sdk-core:1.12.405:jar" "com.fasterxml.jackson.core:jackson-core:2.14.2:jar" "com.fasterxml.jackson.core:jackson-databind:2.14.2:jar" "com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar" "joda-time:joda-time:2.12.2:jar" "org.apache.httpcomponents:httpclient:4.5.14:jar" "commons-io:commons-io:2.12.0"
        do
           mvn dependency:copy \
            --batch-mode \
            -DrepoUrl=https://repo.maven.apache.org/maven2 \
            -Dartifact=${dep} \
            -DoutputDirectory=${HOME}/../lib
        done
      shell: bash
      working-directory: java

    - name: Configure maven-repository-aws-s3
      run: |
        cat <<EOT > ~/.m2/settings.xml
        <settings>
          <servers>
            <server>
              <id>octopus-sales-public-snapshot</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
            <server>
              <id>octopus-sales-public-release</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
          </servers>
        </settings>
        EOT
      shell: bash
      working-directory: java

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Clone code repo
      uses: actions/checkout@v2

    - uses: actions/setup-node@v3
      with:
        node-version: 19
        cache: 'npm'
        cache-dependency-path: js/frontend/yarn.lock

    - name: Install Octopus CLI 🐙
      uses: OctopusDeploy/install-octopus-cli-action@v3
      with:
        version: 'latest'

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Set Version
      if: ${{ steps.branch-name.outputs.current_branch == 'main' }}
      run: echo "PACKAGE_VERSION=$(date +'%Y%m%d').${{ github.run_number }}.${{ github.run_attempt }}" >> $GITHUB_ENV
      shell: bash

    - name: Set Branch Version
      if: ${{ steps.branch-name.outputs.current_branch != 'main' }}
      run: echo "PACKAGE_VERSION=$(date +'%Y%m%d').${{ github.run_number }}.${{ github.run_attempt }}-${{ steps.branch-name.outputs.current_branch }}" >> $GITHUB_ENV
      shell: bash

    - name: Install modules
      run: yarn install
      shell: bash
      working-directory: js/frontend

    - name: Install CycloneDX
      run: npm install --global @cyclonedx/cyclonedx-npm
      shell: bash

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: cyclonedx-npm --ignore-npm-errors --output-file bom.json
      shell: bash
      working-directory: js/frontend

    - name: Set version
      run: |
        jq '.frontendVersion = "v${{ env.PACKAGE_VERSION }}"' config.json > /tmp/config.json
        mv /tmp/config.json config.json
      shell: bash
      working-directory: js/frontend/public

    - name: Build App
      run: yarn run build
      shell: bash
      working-directory: js/frontend
 
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    # The MySQL Docker image is built and pushed.
    - name: Build, tag, and push versioned image to Dockerhub
      run: |
        docker buildx build -f Dockerfile -t octopussamples/octopub-frontend:${{ env.PACKAGE_VERSION }} --platform=linux/amd64,linux/arm64 --push .
      shell: bash
      working-directory: js/frontend

    - name: Build, tag, and push latest image to Dockerhub
      if: ${{ steps.branch-name.outputs.current_branch == 'main' }}
      run: |
        docker buildx build -f Dockerfile -t octopussamples/octopub-frontend:latest --platform=linux/amd64,linux/arm64 --push .
      shell: bash
      working-directory: js/frontend

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: https://ghcr.io
        username: ${{ inputs.github_actor }}
        password: ${{ inputs.github_token }}

    # - name: Build, tag, and push versioned image to Dockerhub
    #   run: |
    #     docker build -t ghcr.io/octopussolutionsengineering/octopub-frontend:${{ env.PACKAGE_VERSION }} .
    #     docker push ghcr.io/octopussolutionsengineering/octopub-frontend:${{ env.PACKAGE_VERSION }}
    #   shell: bash
    #   working-directory: js/frontend

    # - name: Build, tag, and push latest image to Dockerhub
    #   if: ${{ steps.branch-name.outputs.current_branch == 'main' }}
    #   run: |
    #     docker build -t ghcr.io/octopussolutionsengineering/octopub-frontend:latest .
    #     docker push ghcr.io/octopussolutionsengineering/octopub-frontend:latest
    #   shell: bash
    #   working-directory: js/frontend

    - name: Build, tag, and push latest image to Dockerhub
      if: ${{ steps.branch-name.outputs.current_branch == 'main' }}
      run: |
        docker buildx build -f Dockerfile -t ghcr.io/octopussolutionsengineering/octopub-frontend:${{ env.PACKAGE_VERSION }} -t ghcr.io/octopussolutionsengineering/octopub-frontend:latest --platform=linux/amd64,linux/arm64 --push .
      shell: bash
      working-directory: js/frontend


